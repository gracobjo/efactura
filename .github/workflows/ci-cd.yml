name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff .
        
    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage reports to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: htmlcov/
        
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
        
    - name: Run security checks with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create build artifact
      run: |
        mkdir -p dist
        cp -r app/ dist/
        cp -r tests/ dist/
        cp requirements.txt dist/
        cp run.py dist/
        cp config.py dist/
        cp poblar_db.py dist/
        cp analisis_facturas.py dist/
        cp demo_colab.ipynb dist/
        cp README.md dist/
        cp .gitignore dist/
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: efactura-build
        path: dist/
        
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: efactura-build
        path: dist/
        
    - name: Deploy to staging (placeholder)
      run: |
        echo "Deploying to staging environment..."
        echo "This is where you would add your deployment logic"
        echo "Examples:"
        echo "- Deploy to Heroku"
        echo "- Deploy to Railway"
        echo "- Deploy to Render"
        echo "- Deploy to AWS/GCP"
        
  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ All checks passed! eFactura is ready for deployment."
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Some checks failed. Please review the logs." 